{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15760\viewh16980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hello! Thank you for your interest in the labeling birds game. Here is an overview of how it all fits together. \
\
What you need: A selection of songs that you want to analyze. See the cut_songs folder for an example of how the songs are organized and sorted.\
\

\f1\b What each script does: 
\f0\b0 \
\
make_metadata.py \'97 Makes a .csv file with the appropriate metadata needed for the CNN and the label game. \
\

\f1\b Spect_Approach:
\f0\b0 \
\
button.py \'97 Makes the button and dropdown classes for the game.\
\
cnn_accuracy_test.py \'97 Evaluates the accuracy of CNN\'92s based on partitioned testing data.\
\
cropper.py \'97 Takes in the spectrograms made by generate_spec.py, crops them down to the appropriate size, and saves them to a new folder (note, the new folder has to exist). You might have to grant python permission to do this, I solved this using \'93chmod 775 cropper.py\'94.\
\
freeze_update_cnn.py \'97 Takes in a model, freezes the first 10 layers, chops off the last 4 layers, adds in 4 new layers, and trains those 4 new layers. \
\
functions.py \'97 An assortment of functions used across the different python files. \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}load_cnn\
{\listtext	\uc0\u8226 	}img_to_cnn_input\
{\listtext	\uc0\u8226 	}crop_specs\
{\listtext	\uc0\u8226 	}run_img_thru_cnn\
{\listtext	\uc0\u8226 	}display_audio_file\
{\listtext	\uc0\u8226 	}generate_spectrograms\
\ls1\ilvl0{\listtext	\uc0\u8226 	}make_iso_specs\
\ls1\ilvl0{\listtext	\uc0\u8226 	}reset_test_set\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
generate_spec.py  \'97 The script used to generate the spectrograms from the audio data.\
\
label_game.py \'97 The script that runs the labeling game. Run this in terminal to start the game.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 make_cnn.py \'97 The file that makes and trains CNN\'92s.\
\
make_test_set.py \'97 The file that pulls out random spectrograms from each class for testing purposes.\
\
reset_test_specs.py \'97 The file that puts all of the test spectrograms back so you can change the test size and do another random trial.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f1\b How to use the software: (Note, make sure all of your directories/names are correct before running each script)
\f0\b0 \
\
0. Decide how many classes you want to train on, how many and the type of anomalous classes you want to add in, etc. \

\f2\i \
The following steps you should only have to do once
\f0\i0 \
1. Have your songs in folders, similar to what is shown in the cut_songs folder. \
2. Generate the metadata needed using make_metadata.py. This will be used for song classification by assigning labels to each dialect/song.\
3. Generate spectrograms and sort them into the appropriate classes with generate_spec.py.\
4. Then, crop out all of the white space with cropper.py\
\

\f2\i These you\'92ll do more than once depending on what you\'92re using the labeling birds game for.
\f0\i0 \
5. Pull out x images from each class to make a test dataset with make_test_set.py (can undo with reset_test_specs.py)\
6. Make the original CNN with make_CNN.py\
7. Test the accuracy of the CNN by running cnn_accuracy_test.py on your CNN.\
8. Play the label_game.py with however many images you want to classify.\
9. After labeling all of the images, retrain the CNN with freeze_update_cnn.py\
10. Test the accuracy of the CNN with cnn_accuracy_test.py.\
\
Of course, the above is just the recommended use. Feel free to play around with the files to accommodate your needs.\
\
\
\
\
\
\
\
}